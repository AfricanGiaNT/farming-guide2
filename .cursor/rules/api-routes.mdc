---
description: 
globs: 
alwaysApply: false
---
# üìÅ API Routes: Agricultural Advisor Bot for Lilongwe, Malawi

## üîó Endpoints

- `POST /query`: Accept user farming queries (text or image)
- `GET /history/:chat_id`: Return last 10 queries + responses for a user
- `POST /feedback`: Accept user feedback on response usefulness
- `GET /status`: Health check endpoint for bot uptime and API status
- `POST /set-language`: Update language preference (e.g., Chichewa/English)

> ‚ú® Future endpoints may include: `/weather`, `/identify-disease`, `/top-queries`

---

## ‚ùå Error Handling

| Code | Meaning | Action |
|------|---------|--------|
| 400 | Invalid input (e.g., empty query or image not readable) | Return example query format |
| 401 | Unauthorized (missing/invalid token or API key) | Log and reject |
| 429 | Rate limit (OpenAI or Google API) | Retry after delay, inform user |
| 500 | Server error | Log to `query_logs` and optionally `audit_log` table |

---

## üöÄ Backend Setup

- Hosted on **Render.com** (preferred) or **AWS Lambda** for scale
- Use **FastAPI** or **Flask** with `async/await` support
- Schedule jobs (e.g., `/status`, metrics cleanup) via cron or background workers
- External calls: Use retries and timeout strategies for:
  - OpenAI API
  - Google Vision / Translate APIs
  - FAISS search functions

---

## üß† Instructions for AI in Cursor

- Design **RESTful endpoints** with versioning (`/v1/query`, etc. if needed).
- Validate all input before processing:
  - Check image format/type if uploading
  - Check query length
- Use `try/except` blocks and log exceptions to `query_logs` with:
  - Timestamp
  - Error type
  - User ID
- Suggest retry strategy for temporary API failures (status 429 or 5xx)
- Keep response messages consistent and user-friendly (with emoji + Chichewa fallback if needed)
